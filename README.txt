
Setup:

Extract the finefoods.txt.gz into
....\MyApp\MyApp\data\foods.txt

For web server:
Install flask which is a python based web framework
http://flask.pocoo.org/
If you have pip package manager for python simply type
pip install Flask

For testing:

windows build of siege
Read the instructions at this site:
https://github.com/ewwink/siege-windows

for unix i think some thing like this might work:
sudo apt-get install siege
refer to https://www.joedog.org/siege-readme/

you can also use apache-bench but it does not seem to have the
ability to send multiple urls simultenously



To start the server:

cd F:\work\kredxAsg\MyApp
run_server.py
you can enable/disable logging, profiling and debugging support in the file
each of which works pretty well.



To start the client

run this file in your browser
file:///F:/work/kredxAsg/Client/form.html

You need to first press the 'Initialise Data Sources' button to read the
foods.txt file from disk and build the index.
you can also go the location http://localhost:5000/InitDataSources to do the same thing
This could take some time..so be patient


The list of indices of the records that we use are read from this file:
F:\work\kredxAsg\MyApp\MyApp\data\random_indices.txt

You can regenerate this file using
F:\work\kredxAsg\MyApp\MyApp\testing\generate_random_indices.py


Once the data is read you can start sending requests:

The form.html file provides a form to enter the comma seperated query words.
Otherwise this is the syntax of the Get request:
http://localhost:5000/topMatchingDocs?count=10&query=Relatively,Nine,truths,funerals



Testing

List of randomly generated queries are present at
F:\work\kredxAsg\MyApp\MyApp\data\random_queries.txt

These can be generated using the request
http://localhost:5000/GenerateRandomQueries?count=10000
Note: this uses words(and only those words) that have been loaded into the index.
So run this after initialising Data Sources


For load-testing

Install siege and generate random set of queries
Here is 1 run of siege with results
(use random_queries_imp.txt for the Improved api..see below)

C:\siege-windows>siege -t100s -c50 -i --file=F:\work\kredxAsg\MyApp\MyApp\data\r
andom_queries.txt > myquerystats.txt
cygwin warning:
  MS-DOS style path detected: F:\work\kredxAsg\MyApp\MyApp\data\random_queries.t
xt
  Preferred POSIX equivalent is: /cygdrive/f/work/kredxAsg/MyApp/MyApp/data/rand
om_queries.txt
  CYGWIN environment variable option "nodosfilewarning" turns off this warning.
  Consult the user's guide for more details about POSIX paths:
    http://cygwin.com/cygwin-ug-net/using.html#using-pathnames
** SIEGE 3.0.5
** Preparing 50 concurrent users for battle.
The server is now under siege...

Lifting the server siege..      done.

Transactions:                   6661 hits
Availability:                 100.00 %
Elapsed time:                 100.81 secs
Data transferred:             210.23 MB
Response time:                  0.26 secs
Transaction rate:              66.07 trans/sec
Throughput:                     2.09 MB/sec
Concurrency:                   17.05
Successful transactions:        6661
Failed transactions:               0
Longest transaction:            1.63
Shortest transaction:           0.00


To reduce the latency I tried two implementations
Looking at the profile generated by the profiler I tried
tweeking things like
using counters to count docs,
storing part of the score at indexing time,
disabling special character removal code which was called multiple times, etc..

But after several iterations both give about the same
results. 

The second REST api can be accessed like :
http://localhost:5000/topMatchingDocsImproved?count=10&query=Relatively,Nine,truths,funerals





